
Staj_Proje_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000295c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa8  08002aa8  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa8  08002aa8  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa8  08002aa8  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa8  08002aa8  00003aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002aac  08002aac  00003aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002ab0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000010  08002ac0  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002ac0  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c24  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001766  00000000  00000000  0000cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0000e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c6  00000000  00000000  0000edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014695  00000000  00000000  0000f596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4bc  00000000  00000000  00023c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b89  00000000  00000000  0002f0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3c70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023dc  00000000  00000000  000b3cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b6090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080029fc 	.word	0x080029fc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	080029fc 	.word	0x080029fc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800021c:	f3bf 8f4f 	dsb	sy
}
 8000220:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000222:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <__NVIC_SystemReset+0x1c>)
 8000224:	4a04      	ldr	r2, [pc, #16]	@ (8000238 <__NVIC_SystemReset+0x20>)
 8000226:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000228:	f3bf 8f4f 	dsb	sy
}
 800022c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800022e:	46c0      	nop			@ (mov r8, r8)
 8000230:	e7fd      	b.n	800022e <__NVIC_SystemReset+0x16>
 8000232:	46c0      	nop			@ (mov r8, r8)
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	05fa0004 	.word	0x05fa0004

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 fb0e 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f88c 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f9bc 	bl	80005c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800024c:	f000 f8e2 	bl	8000414 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //uint16_t duty_cycle=0;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000250:	4b3d      	ldr	r3, [pc, #244]	@ (8000348 <main+0x10c>)
 8000252:	2104      	movs	r1, #4
 8000254:	0018      	movs	r0, r3
 8000256:	f001 fbdf 	bl	8001a18 <HAL_TIM_PWM_Start>
  Set_PWM_Period(period);
 800025a:	4b3c      	ldr	r3, [pc, #240]	@ (800034c <main+0x110>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fa14 	bl	800068c <Set_PWM_Period>
	  HAL_Delay(10);*/




	  butonState2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000264:	23a0      	movs	r3, #160	@ 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2110      	movs	r1, #16
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fdba 	bl	8000de4 <HAL_GPIO_ReadPin>
 8000270:	0003      	movs	r3, r0
 8000272:	001a      	movs	r2, r3
 8000274:	4b36      	ldr	r3, [pc, #216]	@ (8000350 <main+0x114>)
 8000276:	601a      	str	r2, [r3, #0]
	  butonState=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000278:	23a0      	movs	r3, #160	@ 0xa0
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	2102      	movs	r1, #2
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fdb0 	bl	8000de4 <HAL_GPIO_ReadPin>
 8000284:	0003      	movs	r3, r0
 8000286:	001a      	movs	r2, r3
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <main+0x118>)
 800028a:	601a      	str	r2, [r3, #0]
	  butonReset=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800028c:	4b32      	ldr	r3, [pc, #200]	@ (8000358 <main+0x11c>)
 800028e:	2102      	movs	r1, #2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fda7 	bl	8000de4 <HAL_GPIO_ReadPin>
 8000296:	0003      	movs	r3, r0
 8000298:	001a      	movs	r2, r3
 800029a:	4b30      	ldr	r3, [pc, #192]	@ (800035c <main+0x120>)
 800029c:	601a      	str	r2, [r3, #0]
	    if(butonState==0)
 800029e:	4b2d      	ldr	r3, [pc, #180]	@ (8000354 <main+0x118>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d115      	bne.n	80002d2 <main+0x96>
	    {
	    	HAL_Delay(40);
 80002a6:	2028      	movs	r0, #40	@ 0x28
 80002a8:	f000 fb60 	bl	800096c <HAL_Delay>
	    	if(butonState==0)
 80002ac:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <main+0x118>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d10a      	bne.n	80002ca <main+0x8e>
	    	{
	    		period-=Period_azaltma;
 80002b4:	4b25      	ldr	r3, [pc, #148]	@ (800034c <main+0x110>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3b32      	subs	r3, #50	@ 0x32
 80002ba:	001a      	movs	r2, r3
 80002bc:	4b23      	ldr	r3, [pc, #140]	@ (800034c <main+0x110>)
 80002be:	601a      	str	r2, [r3, #0]

	    		Set_PWM_Period(period);
 80002c0:	4b22      	ldr	r3, [pc, #136]	@ (800034c <main+0x110>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f9e1 	bl	800068c <Set_PWM_Period>


	    	}
	    	HAL_Delay(120);
 80002ca:	2078      	movs	r0, #120	@ 0x78
 80002cc:	f000 fb4e 	bl	800096c <HAL_Delay>
 80002d0:	e036      	b.n	8000340 <main+0x104>
	    }

	    else if(butonState2==0)
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <main+0x114>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d11f      	bne.n	800031a <main+0xde>
	    {
	    	HAL_Delay(40);
 80002da:	2028      	movs	r0, #40	@ 0x28
 80002dc:	f000 fb46 	bl	800096c <HAL_Delay>
	    	if(butonState2==0)
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <main+0x114>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d114      	bne.n	8000312 <main+0xd6>
	    	{
	    		period+=Period_azaltma;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <main+0x110>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3332      	adds	r3, #50	@ 0x32
 80002ee:	001a      	movs	r2, r3
 80002f0:	4b16      	ldr	r3, [pc, #88]	@ (800034c <main+0x110>)
 80002f2:	601a      	str	r2, [r3, #0]
	    		if(period>Max_Period)
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <main+0x110>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	23fa      	movs	r3, #250	@ 0xfa
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d903      	bls.n	8000308 <main+0xcc>
	    		{
	    			period=Max_Period;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <main+0x110>)
 8000302:	22fa      	movs	r2, #250	@ 0xfa
 8000304:	0092      	lsls	r2, r2, #2
 8000306:	601a      	str	r2, [r3, #0]

	    		}
		    	Set_PWM_Period(period);
 8000308:	4b10      	ldr	r3, [pc, #64]	@ (800034c <main+0x110>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	0018      	movs	r0, r3
 800030e:	f000 f9bd 	bl	800068c <Set_PWM_Period>

	    	}
	    	HAL_Delay(120);
 8000312:	2078      	movs	r0, #120	@ 0x78
 8000314:	f000 fb2a 	bl	800096c <HAL_Delay>
 8000318:	e012      	b.n	8000340 <main+0x104>

	    }
	    else if (butonReset == 0)
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <main+0x120>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d10e      	bne.n	8000340 <main+0x104>
	    {
	        HAL_Delay(40); // Debouncing
 8000322:	2028      	movs	r0, #40	@ 0x28
 8000324:	f000 fb22 	bl	800096c <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <main+0x11c>)
 800032a:	2102      	movs	r1, #2
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fd59 	bl	8000de4 <HAL_GPIO_ReadPin>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d101      	bne.n	800033a <main+0xfe>
	        {
	        	NVIC_SystemReset();
 8000336:	f7ff ff6f 	bl	8000218 <__NVIC_SystemReset>
	        }
	        HAL_Delay(125); // Ekstra gecikme
 800033a:	207d      	movs	r0, #125	@ 0x7d
 800033c:	f000 fb16 	bl	800096c <HAL_Delay>
	    }

	    HAL_Delay(10);
 8000340:	200a      	movs	r0, #10
 8000342:	f000 fb13 	bl	800096c <HAL_Delay>
	  butonState2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000346:	e78d      	b.n	8000264 <main+0x28>
 8000348:	2000002c 	.word	0x2000002c
 800034c:	20000000 	.word	0x20000000
 8000350:	2000007c 	.word	0x2000007c
 8000354:	20000078 	.word	0x20000078
 8000358:	50000400 	.word	0x50000400
 800035c:	20000080 	.word	0x20000080

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b093      	sub	sp, #76	@ 0x4c
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	2414      	movs	r4, #20
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2334      	movs	r3, #52	@ 0x34
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f002 fb17 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	0018      	movs	r0, r3
 800037a:	2310      	movs	r3, #16
 800037c:	001a      	movs	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f002 fb10 	bl	80029a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000384:	2380      	movs	r3, #128	@ 0x80
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fd65 	bl	8000e58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038e:	193b      	adds	r3, r7, r4
 8000390:	2202      	movs	r2, #2
 8000392:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800039c:	0021      	movs	r1, r4
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2240      	movs	r2, #64	@ 0x40
 80003a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2202      	movs	r2, #2
 80003ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2202      	movs	r2, #2
 80003b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2208      	movs	r2, #8
 80003c0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2280      	movs	r2, #128	@ 0x80
 80003c6:	0292      	lsls	r2, r2, #10
 80003c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2280      	movs	r2, #128	@ 0x80
 80003ce:	0592      	lsls	r2, r2, #22
 80003d0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fd7f 	bl	8000ed8 <HAL_RCC_OscConfig>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003de:	f000 f96f 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2202      	movs	r2, #2
 80003ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2102      	movs	r1, #2
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f87a 	bl	80014f8 <HAL_RCC_ClockConfig>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000408:	f000 f95a 	bl	80006c0 <Error_Handler>
  }
}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b013      	add	sp, #76	@ 0x4c
 8000412:	bd90      	pop	{r4, r7, pc}

08000414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09c      	sub	sp, #112	@ 0x70
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041a:	2360      	movs	r3, #96	@ 0x60
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	0018      	movs	r0, r3
 8000420:	2310      	movs	r3, #16
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fabd 	bl	80029a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042a:	2354      	movs	r3, #84	@ 0x54
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	0018      	movs	r0, r3
 8000430:	230c      	movs	r3, #12
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f002 fab5 	bl	80029a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043a:	2338      	movs	r3, #56	@ 0x38
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	0018      	movs	r0, r3
 8000440:	231c      	movs	r3, #28
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f002 faad 	bl	80029a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	0018      	movs	r0, r3
 800044e:	2334      	movs	r3, #52	@ 0x34
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f002 faa6 	bl	80029a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000458:	4b56      	ldr	r3, [pc, #344]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 800045a:	4a57      	ldr	r2, [pc, #348]	@ (80005b8 <MX_TIM1_Init+0x1a4>)
 800045c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 800045e:	4b55      	ldr	r3, [pc, #340]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000460:	4a56      	ldr	r2, [pc, #344]	@ (80005bc <MX_TIM1_Init+0x1a8>)
 8000462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000464:	4b53      	ldr	r3, [pc, #332]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800046a:	4b52      	ldr	r3, [pc, #328]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 800046c:	4a54      	ldr	r2, [pc, #336]	@ (80005c0 <MX_TIM1_Init+0x1ac>)
 800046e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000470:	4b50      	ldr	r3, [pc, #320]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000476:	4b4f      	ldr	r3, [pc, #316]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047c:	4b4d      	ldr	r3, [pc, #308]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000482:	4b4c      	ldr	r3, [pc, #304]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 f9c1 	bl	800180c <HAL_TIM_Base_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800048e:	f000 f917 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000492:	2160      	movs	r1, #96	@ 0x60
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	0152      	lsls	r2, r2, #5
 800049a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800049c:	187a      	adds	r2, r7, r1
 800049e:	4b45      	ldr	r3, [pc, #276]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fc9c 	bl	8001de0 <HAL_TIM_ConfigClockSource>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004ac:	f000 f908 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004b0:	4b40      	ldr	r3, [pc, #256]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fa50 	bl	8001958 <HAL_TIM_PWM_Init>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004bc:	f000 f900 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	2154      	movs	r1, #84	@ 0x54
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d4:	187a      	adds	r2, r7, r1
 80004d6:	4b37      	ldr	r3, [pc, #220]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f95e 	bl	800279c <HAL_TIMEx_MasterConfigSynchronization>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80004e4:	f000 f8ec 	bl	80006c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e8:	2138      	movs	r1, #56	@ 0x38
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2260      	movs	r2, #96	@ 0x60
 80004ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = (1000-1)/2;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	22f4      	movs	r2, #244	@ 0xf4
 80004f4:	32ff      	adds	r2, #255	@ 0xff
 80004f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000516:	1879      	adds	r1, r7, r1
 8000518:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 800051a:	2204      	movs	r2, #4
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fb5f 	bl	8001be0 <HAL_TIM_PWM_ConfigChannel>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000526:	f000 f8cb 	bl	80006c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2280      	movs	r2, #128	@ 0x80
 800054c:	0192      	lsls	r2, r2, #6
 800054e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	0492      	lsls	r2, r2, #18
 8000568:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800057c:	1d3a      	adds	r2, r7, #4
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f002 f972 	bl	800286c <HAL_TIMEx_ConfigBreakDeadTime>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 800058c:	f000 f898 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f992 	bl	80018bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 800059a:	2104      	movs	r1, #4
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fa3b 	bl	8001a18 <HAL_TIM_PWM_Start>
  //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,500);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005a2:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <MX_TIM1_Init+0x1a0>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 f8d5 	bl	8000754 <HAL_TIM_MspPostInit>

}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b01c      	add	sp, #112	@ 0x70
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	2000002c 	.word	0x2000002c
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	0000f9ff 	.word	0x0000f9ff
 80005c0:	000003e7 	.word	0x000003e7

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b089      	sub	sp, #36	@ 0x24
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	240c      	movs	r4, #12
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	0018      	movs	r0, r3
 80005d0:	2314      	movs	r3, #20
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 f9e5 	bl	80029a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <MX_GPIO_Init+0xc0>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005de:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <MX_GPIO_Init+0xc0>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e6:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <MX_GPIO_Init+0xc0>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <MX_GPIO_Init+0xc0>)
 80005f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005f6:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <MX_GPIO_Init+0xc0>)
 80005f8:	2102      	movs	r1, #2
 80005fa:	430a      	orrs	r2, r1
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005fe:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <MX_GPIO_Init+0xc0>)
 8000600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000602:	2202      	movs	r2, #2
 8000604:	4013      	ands	r3, r2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800060a:	23a0      	movs	r3, #160	@ 0xa0
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fc03 	bl	8000e1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2212      	movs	r2, #18
 800061c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2201      	movs	r2, #1
 8000628:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	193a      	adds	r2, r7, r4
 800062c:	23a0      	movs	r3, #160	@ 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fa72 	bl	8000b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2220      	movs	r2, #32
 800063c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2201      	movs	r2, #1
 8000642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	193a      	adds	r2, r7, r4
 8000652:	23a0      	movs	r3, #160	@ 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fa5f 	bl	8000b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2202      	movs	r2, #2
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2201      	movs	r2, #1
 800066e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	193b      	adds	r3, r7, r4
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <MX_GPIO_Init+0xc4>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 fa50 	bl	8000b1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b009      	add	sp, #36	@ 0x24
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	50000400 	.word	0x50000400

0800068c <Set_PWM_Period>:

/* USER CODE BEGIN 4 */
void Set_PWM_Period(uint32_t new_period)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

    uint32_t duty_cycle = new_period/2;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	085b      	lsrs	r3, r3, #1
 8000698:	60fb      	str	r3, [r7, #12]

  __HAL_TIM_SET_AUTORELOAD(&htim1, new_period - 1);
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <Set_PWM_Period+0x30>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	3a01      	subs	r2, #1
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <Set_PWM_Period+0x30>)
 80006aa:	60da      	str	r2, [r3, #12]

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <Set_PWM_Period+0x30>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	639a      	str	r2, [r3, #56]	@ 0x38

  //HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b004      	add	sp, #16
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000002c 	.word	0x2000002c

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	e7fd      	b.n	80006c8 <Error_Handler+0x8>

080006cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <HAL_MspInit+0x44>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <HAL_MspInit+0x44>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <HAL_MspInit+0x44>)
 80006ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <HAL_MspInit+0x44>)
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	0549      	lsls	r1, r1, #21
 80006f4:	430a      	orrs	r2, r1
 80006f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_MspInit+0x44>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	055b      	lsls	r3, r3, #21
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <HAL_TIM_Base_MspInit+0x38>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d10d      	bne.n	8000742 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 8000728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	0109      	lsls	r1, r1, #4
 8000730:	430a      	orrs	r2, r1
 8000732:	641a      	str	r2, [r3, #64]	@ 0x40
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 8000736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40012c00 	.word	0x40012c00
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	240c      	movs	r4, #12
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 f91c 	bl	80029a4 <memset>
  if(htim->Instance==TIM1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <HAL_TIM_MspPostInit+0x74>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d123      	bne.n	80007be <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <HAL_TIM_MspPostInit+0x78>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <HAL_TIM_MspPostInit+0x78>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
 8000782:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <HAL_TIM_MspPostInit+0x78>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2202      	movs	r2, #2
 800079c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	187a      	adds	r2, r7, r1
 80007b2:	23a0      	movs	r3, #160	@ 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 f9af 	bl	8000b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b009      	add	sp, #36	@ 0x24
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40021000 	.word	0x40021000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f89c 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800080c:	480d      	ldr	r0, [pc, #52]	@ (8000844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000810:	f7ff fff7 	bl	8000802 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <LoopForever+0x6>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	@ (800084c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <LoopForever+0xe>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	@ (8000858 <LoopForever+0x16>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083a:	f002 f8bb 	bl	80029b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800083e:	f7ff fcfd 	bl	800023c <main>

08000842 <LoopForever>:

LoopForever:
  b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   r0, =_estack
 8000844:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000850:	08002ab0 	.word	0x08002ab0
  ldr r2, =_sbss
 8000854:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000858:	20000088 	.word	0x20000088

0800085c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_IRQHandler>
	...

08000860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <HAL_Init+0x3c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_Init+0x3c>)
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	0049      	lsls	r1, r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f810 	bl	80008a0 <HAL_InitTick>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d003      	beq.n	800088c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e001      	b.n	8000890 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff ff1e 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <HAL_InitTick+0x88>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d02b      	beq.n	8000910 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_InitTick+0x8c>)
 80008ba:	681c      	ldr	r4, [r3, #0]
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <HAL_InitTick+0x88>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	0019      	movs	r1, r3
 80008c2:	23fa      	movs	r3, #250	@ 0xfa
 80008c4:	0098      	lsls	r0, r3, #2
 80008c6:	f7ff fc1b 	bl	8000100 <__udivsi3>
 80008ca:	0003      	movs	r3, r0
 80008cc:	0019      	movs	r1, r3
 80008ce:	0020      	movs	r0, r4
 80008d0:	f7ff fc16 	bl	8000100 <__udivsi3>
 80008d4:	0003      	movs	r3, r0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f913 	bl	8000b02 <HAL_SYSTICK_Config>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d112      	bne.n	8000906 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d80a      	bhi.n	80008fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	2301      	movs	r3, #1
 80008ea:	425b      	negs	r3, r3
 80008ec:	2200      	movs	r2, #0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 f8f2 	bl	8000ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_InitTick+0x90>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e00d      	b.n	8000918 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008fc:	230f      	movs	r3, #15
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e008      	b.n	8000918 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000906:	230f      	movs	r3, #15
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e003      	b.n	8000918 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000910:	230f      	movs	r3, #15
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000918:	230f      	movs	r3, #15
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	781b      	ldrb	r3, [r3, #0]
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b005      	add	sp, #20
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000004 	.word	0x20000004
 8000930:	20000008 	.word	0x20000008

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	18d2      	adds	r2, r2, r3
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <HAL_IncTick+0x20>)
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	2000000c 	.word	0x2000000c
 8000954:	20000084 	.word	0x20000084

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	20000084 	.word	0x20000084

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	0003      	movs	r3, r0
 800097a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_Delay+0x44>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	001a      	movs	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	189b      	adds	r3, r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	0002      	movs	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	2000000c 	.word	0x2000000c

080009b4 <__NVIC_SetPriority>:
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009c8:	d828      	bhi.n	8000a1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000a88 <__NVIC_SetPriority+0xd4>)
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	33c0      	adds	r3, #192	@ 0xc0
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	589b      	ldr	r3, [r3, r2]
 80009da:	1dfa      	adds	r2, r7, #7
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	0011      	movs	r1, r2
 80009e0:	2203      	movs	r2, #3
 80009e2:	400a      	ands	r2, r1
 80009e4:	00d2      	lsls	r2, r2, #3
 80009e6:	21ff      	movs	r1, #255	@ 0xff
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	019b      	lsls	r3, r3, #6
 80009f6:	22ff      	movs	r2, #255	@ 0xff
 80009f8:	401a      	ands	r2, r3
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0018      	movs	r0, r3
 8000a00:	2303      	movs	r3, #3
 8000a02:	4003      	ands	r3, r0
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	481f      	ldr	r0, [pc, #124]	@ (8000a88 <__NVIC_SetPriority+0xd4>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	33c0      	adds	r3, #192	@ 0xc0
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	501a      	str	r2, [r3, r0]
}
 8000a1a:	e031      	b.n	8000a80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <__NVIC_SetPriority+0xd8>)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0019      	movs	r1, r3
 8000a24:	230f      	movs	r3, #15
 8000a26:	400b      	ands	r3, r1
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3306      	adds	r3, #6
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	18d3      	adds	r3, r2, r3
 8000a32:	3304      	adds	r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	400a      	ands	r2, r1
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	21ff      	movs	r1, #255	@ 0xff
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	019b      	lsls	r3, r3, #6
 8000a52:	22ff      	movs	r2, #255	@ 0xff
 8000a54:	401a      	ands	r2, r3
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	4003      	ands	r3, r0
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <__NVIC_SetPriority+0xd8>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	001c      	movs	r4, r3
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	4023      	ands	r3, r4
 8000a70:	3b08      	subs	r3, #8
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	430a      	orrs	r2, r1
 8000a76:	3306      	adds	r3, #6
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	18c3      	adds	r3, r0, r3
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b003      	add	sp, #12
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	045b      	lsls	r3, r3, #17
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d301      	bcc.n	8000aa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e010      	b.n	8000aca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <SysTick_Config+0x44>)
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	3a01      	subs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff ff7c 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <SysTick_Config+0x44>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <SysTick_Config+0x44>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	1c02      	adds	r2, r0, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff ff5d 	bl	80009b4 <__NVIC_SetPriority>
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b004      	add	sp, #16
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ffbf 	bl	8000a90 <SysTick_Config>
 8000b12:	0003      	movs	r3, r0
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e147      	b.n	8000dbc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4091      	lsls	r1, r2
 8000b36:	000a      	movs	r2, r1
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d100      	bne.n	8000b44 <HAL_GPIO_Init+0x28>
 8000b42:	e138      	b.n	8000db6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2203      	movs	r2, #3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d005      	beq.n	8000b5c <HAL_GPIO_Init+0x40>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d130      	bne.n	8000bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	43da      	mvns	r2, r3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	0013      	movs	r3, r2
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b92:	2201      	movs	r2, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	2201      	movs	r2, #1
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d017      	beq.n	8000bfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2203      	movs	r2, #3
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d123      	bne.n	8000c4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	08da      	lsrs	r2, r3, #3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3208      	adds	r2, #8
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	58d3      	ldr	r3, [r2, r3]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2207      	movs	r2, #7
 8000c18:	4013      	ands	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	220f      	movs	r2, #15
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2107      	movs	r1, #7
 8000c32:	400b      	ands	r3, r1
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	08da      	lsrs	r2, r3, #3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3208      	adds	r2, #8
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	6939      	ldr	r1, [r7, #16]
 8000c4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	23c0      	movs	r3, #192	@ 0xc0
 8000c88:	029b      	lsls	r3, r3, #10
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d100      	bne.n	8000c90 <HAL_GPIO_Init+0x174>
 8000c8e:	e092      	b.n	8000db6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c90:	4a50      	ldr	r2, [pc, #320]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3318      	adds	r3, #24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	589b      	ldr	r3, [r3, r2]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	23a0      	movs	r3, #160	@ 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d013      	beq.n	8000ce6 <HAL_GPIO_Init+0x1ca>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a45      	ldr	r2, [pc, #276]	@ (8000dd8 <HAL_GPIO_Init+0x2bc>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00d      	beq.n	8000ce2 <HAL_GPIO_Init+0x1c6>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <HAL_GPIO_Init+0x2c0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d007      	beq.n	8000cde <HAL_GPIO_Init+0x1c2>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a43      	ldr	r2, [pc, #268]	@ (8000de0 <HAL_GPIO_Init+0x2c4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_GPIO_Init+0x1be>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x1cc>
 8000cda:	2305      	movs	r3, #5
 8000cdc:	e004      	b.n	8000ce8 <HAL_GPIO_Init+0x1cc>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x1cc>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x1cc>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	2103      	movs	r1, #3
 8000cec:	400a      	ands	r2, r1
 8000cee:	00d2      	lsls	r2, r2, #3
 8000cf0:	4093      	lsls	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cf8:	4936      	ldr	r1, [pc, #216]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3318      	adds	r3, #24
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d06:	4b33      	ldr	r3, [pc, #204]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	035b      	lsls	r3, r3, #13
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	039b      	lsls	r3, r3, #14
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d5c:	2384      	movs	r3, #132	@ 0x84
 8000d5e:	58d3      	ldr	r3, [r2, r3]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d80:	4914      	ldr	r1, [pc, #80]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d82:	2284      	movs	r2, #132	@ 0x84
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d88:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000d8a:	2380      	movs	r3, #128	@ 0x80
 8000d8c:	58d3      	ldr	r3, [r2, r3]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	025b      	lsls	r3, r3, #9
 8000da2:	4013      	ands	r3, r2
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dae:	4909      	ldr	r1, [pc, #36]	@ (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	40da      	lsrs	r2, r3
 8000dc4:	1e13      	subs	r3, r2, #0
 8000dc6:	d000      	beq.n	8000dca <HAL_GPIO_Init+0x2ae>
 8000dc8:	e6b0      	b.n	8000b2c <HAL_GPIO_Init+0x10>
  }
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b006      	add	sp, #24
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	50000400 	.word	0x50000400
 8000ddc:	50000800 	.word	0x50000800
 8000de0:	50000c00 	.word	0x50000c00

08000de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	000a      	movs	r2, r1
 8000dee:	1cbb      	adds	r3, r7, #2
 8000df0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	1cba      	adds	r2, r7, #2
 8000df8:	8812      	ldrh	r2, [r2, #0]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d004      	beq.n	8000e08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dfe:	230f      	movs	r3, #15
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e003      	b.n	8000e10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e10:	230f      	movs	r3, #15
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	781b      	ldrb	r3, [r3, #0]
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b004      	add	sp, #16
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	0008      	movs	r0, r1
 8000e28:	0011      	movs	r1, r2
 8000e2a:	1cbb      	adds	r3, r7, #2
 8000e2c:	1c02      	adds	r2, r0, #0
 8000e2e:	801a      	strh	r2, [r3, #0]
 8000e30:	1c7b      	adds	r3, r7, #1
 8000e32:	1c0a      	adds	r2, r1, #0
 8000e34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e36:	1c7b      	adds	r3, r7, #1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d004      	beq.n	8000e48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3e:	1cbb      	adds	r3, r7, #2
 8000e40:	881a      	ldrh	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e46:	e003      	b.n	8000e50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e48:	1cbb      	adds	r3, r7, #2
 8000e4a:	881a      	ldrh	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d11f      	bne.n	8000ebc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	0013      	movs	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	189b      	adds	r3, r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4912      	ldr	r1, [pc, #72]	@ (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff f938 	bl	8000100 <__udivsi3>
 8000e90:	0003      	movs	r3, r0
 8000e92:	3301      	adds	r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e96:	e008      	b.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	e001      	b.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e009      	b.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	2380      	movs	r3, #128	@ 0x80
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d0ed      	beq.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	fffff9ff 	.word	0xfffff9ff
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	000f4240 	.word	0x000f4240

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e2f3      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x1e>
 8000ef4:	e07c      	b.n	8000ff0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef6:	4bc3      	ldr	r3, [pc, #780]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2238      	movs	r2, #56	@ 0x38
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f00:	4bc0      	ldr	r3, [pc, #768]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4013      	ands	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2b10      	cmp	r3, #16
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x3e>
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d002      	beq.n	8000f1c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d10b      	bne.n	8000f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	4bb9      	ldr	r3, [pc, #740]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	d062      	beq.n	8000fee <HAL_RCC_OscConfig+0x116>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d15e      	bne.n	8000fee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e2ce      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d107      	bne.n	8000f50 <HAL_RCC_OscConfig+0x78>
 8000f40:	4bb0      	ldr	r3, [pc, #704]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4baf      	ldr	r3, [pc, #700]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	0249      	lsls	r1, r1, #9
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e020      	b.n	8000f92 <HAL_RCC_OscConfig+0xba>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	23a0      	movs	r3, #160	@ 0xa0
 8000f56:	02db      	lsls	r3, r3, #11
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d10e      	bne.n	8000f7a <HAL_RCC_OscConfig+0xa2>
 8000f5c:	4ba9      	ldr	r3, [pc, #676]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4ba8      	ldr	r3, [pc, #672]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	02c9      	lsls	r1, r1, #11
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	4ba6      	ldr	r3, [pc, #664]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4ba5      	ldr	r3, [pc, #660]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	2180      	movs	r1, #128	@ 0x80
 8000f72:	0249      	lsls	r1, r1, #9
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e00b      	b.n	8000f92 <HAL_RCC_OscConfig+0xba>
 8000f7a:	4ba2      	ldr	r3, [pc, #648]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4ba1      	ldr	r3, [pc, #644]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	49a1      	ldr	r1, [pc, #644]	@ (8001208 <HAL_RCC_OscConfig+0x330>)
 8000f82:	400a      	ands	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	4b9f      	ldr	r3, [pc, #636]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	499f      	ldr	r1, [pc, #636]	@ (800120c <HAL_RCC_OscConfig+0x334>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d014      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fcdd 	bl	8000958 <HAL_GetTick>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcd8 	bl	8000958 <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e28d      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb6:	4b93      	ldr	r3, [pc, #588]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	@ 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xcc>
 8000fc2:	e015      	b.n	8000ff0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcc8 	bl	8000958 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fce:	f7ff fcc3 	bl	8000958 <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b64      	cmp	r3, #100	@ 0x64
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e278      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe0:	4b88      	ldr	r3, [pc, #544]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0xf6>
 8000fec:	e000      	b.n	8000ff0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d100      	bne.n	8000ffc <HAL_RCC_OscConfig+0x124>
 8000ffa:	e099      	b.n	8001130 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ffc:	4b81      	ldr	r3, [pc, #516]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2238      	movs	r2, #56	@ 0x38
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001006:	4b7f      	ldr	r3, [pc, #508]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2203      	movs	r2, #3
 800100c:	4013      	ands	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d102      	bne.n	800101c <HAL_RCC_OscConfig+0x144>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d002      	beq.n	8001022 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d135      	bne.n	800108e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001022:	4b78      	ldr	r3, [pc, #480]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4013      	ands	r3, r2
 800102c:	d005      	beq.n	800103a <HAL_RCC_OscConfig+0x162>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e24b      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4b72      	ldr	r3, [pc, #456]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a74      	ldr	r2, [pc, #464]	@ (8001210 <HAL_RCC_OscConfig+0x338>)
 8001040:	4013      	ands	r3, r2
 8001042:	0019      	movs	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	021a      	lsls	r2, r3, #8
 800104a:	4b6e      	ldr	r3, [pc, #440]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800104c:	430a      	orrs	r2, r1
 800104e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d112      	bne.n	800107c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001056:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6e      	ldr	r2, [pc, #440]	@ (8001214 <HAL_RCC_OscConfig+0x33c>)
 800105c:	4013      	ands	r3, r2
 800105e:	0019      	movs	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	4b67      	ldr	r3, [pc, #412]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800106a:	4b66      	ldr	r3, [pc, #408]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0adb      	lsrs	r3, r3, #11
 8001070:	2207      	movs	r2, #7
 8001072:	4013      	ands	r3, r2
 8001074:	4a68      	ldr	r2, [pc, #416]	@ (8001218 <HAL_RCC_OscConfig+0x340>)
 8001076:	40da      	lsrs	r2, r3
 8001078:	4b68      	ldr	r3, [pc, #416]	@ (800121c <HAL_RCC_OscConfig+0x344>)
 800107a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800107c:	4b68      	ldr	r3, [pc, #416]	@ (8001220 <HAL_RCC_OscConfig+0x348>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fc0d 	bl	80008a0 <HAL_InitTick>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d051      	beq.n	800112e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e221      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d030      	beq.n	80010f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001096:	4b5b      	ldr	r3, [pc, #364]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a5e      	ldr	r2, [pc, #376]	@ (8001214 <HAL_RCC_OscConfig+0x33c>)
 800109c:	4013      	ands	r3, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	4b57      	ldr	r3, [pc, #348]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80010aa:	4b56      	ldr	r3, [pc, #344]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b55      	ldr	r3, [pc, #340]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	0049      	lsls	r1, r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc4e 	bl	8000958 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fc49 	bl	8000958 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1fe      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b48      	ldr	r3, [pc, #288]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001210 <HAL_RCC_OscConfig+0x338>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	0019      	movs	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	021a      	lsls	r2, r3, #8
 80010f0:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	430a      	orrs	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	e01b      	b.n	8001130 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010f8:	4b42      	ldr	r3, [pc, #264]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	4949      	ldr	r1, [pc, #292]	@ (8001224 <HAL_RCC_OscConfig+0x34c>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fc28 	bl	8000958 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc23 	bl	8000958 <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1d8      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001120:	4b38      	ldr	r3, [pc, #224]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4013      	ands	r3, r2
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0x236>
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800112e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2208      	movs	r2, #8
 8001136:	4013      	ands	r3, r2
 8001138:	d047      	beq.n	80011ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800113a:	4b32      	ldr	r3, [pc, #200]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2238      	movs	r2, #56	@ 0x38
 8001140:	4013      	ands	r3, r2
 8001142:	2b18      	cmp	r3, #24
 8001144:	d10a      	bne.n	800115c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d03c      	beq.n	80011ca <HAL_RCC_OscConfig+0x2f2>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d138      	bne.n	80011ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e1ba      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d019      	beq.n	8001198 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001166:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fbf2 	bl	8000958 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fbed 	bl	8000958 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1a2      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d0f1      	beq.n	800117a <HAL_RCC_OscConfig+0x2a2>
 8001196:	e018      	b.n	80011ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800119a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbd8 	bl	8000958 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff fbd3 	bl	8000958 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e188      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d1f1      	bne.n	80011ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2204      	movs	r2, #4
 80011d0:	4013      	ands	r3, r2
 80011d2:	d100      	bne.n	80011d6 <HAL_RCC_OscConfig+0x2fe>
 80011d4:	e0c6      	b.n	8001364 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d6:	231f      	movs	r3, #31
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2238      	movs	r2, #56	@ 0x38
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d11e      	bne.n	8001228 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x31e>
 80011f4:	e0b6      	b.n	8001364 <HAL_RCC_OscConfig+0x48c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d000      	beq.n	8001200 <HAL_RCC_OscConfig+0x328>
 80011fe:	e0b1      	b.n	8001364 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e166      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
 8001204:	40021000 	.word	0x40021000
 8001208:	fffeffff 	.word	0xfffeffff
 800120c:	fffbffff 	.word	0xfffbffff
 8001210:	ffff80ff 	.word	0xffff80ff
 8001214:	ffffc7ff 	.word	0xffffc7ff
 8001218:	00f42400 	.word	0x00f42400
 800121c:	20000004 	.word	0x20000004
 8001220:	20000008 	.word	0x20000008
 8001224:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001228:	4bac      	ldr	r3, [pc, #688]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800122a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	055b      	lsls	r3, r3, #21
 8001230:	4013      	ands	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x360>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x362>
 8001238:	2300      	movs	r3, #0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d011      	beq.n	8001262 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4ba7      	ldr	r3, [pc, #668]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001242:	4ba6      	ldr	r3, [pc, #664]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	0549      	lsls	r1, r1, #21
 8001248:	430a      	orrs	r2, r1
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800124c:	4ba3      	ldr	r3, [pc, #652]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800124e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	055b      	lsls	r3, r3, #21
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800125a:	231f      	movs	r3, #31
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001262:	4b9f      	ldr	r3, [pc, #636]	@ (80014e0 <HAL_RCC_OscConfig+0x608>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4013      	ands	r3, r2
 800126c:	d11a      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800126e:	4b9c      	ldr	r3, [pc, #624]	@ (80014e0 <HAL_RCC_OscConfig+0x608>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b9b      	ldr	r3, [pc, #620]	@ (80014e0 <HAL_RCC_OscConfig+0x608>)
 8001274:	2180      	movs	r1, #128	@ 0x80
 8001276:	0049      	lsls	r1, r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800127c:	f7ff fb6c 	bl	8000958 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001286:	f7ff fb67 	bl	8000958 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e11c      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001298:	4b91      	ldr	r3, [pc, #580]	@ (80014e0 <HAL_RCC_OscConfig+0x608>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4013      	ands	r3, r2
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x3e2>
 80012ac:	4b8b      	ldr	r3, [pc, #556]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012b0:	4b8a      	ldr	r3, [pc, #552]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x41c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x404>
 80012c2:	4b86      	ldr	r3, [pc, #536]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012c6:	4b85      	ldr	r3, [pc, #532]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012c8:	2104      	movs	r1, #4
 80012ca:	430a      	orrs	r2, r1
 80012cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012ce:	4b83      	ldr	r3, [pc, #524]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012d2:	4b82      	ldr	r3, [pc, #520]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0x41c>
 80012dc:	4b7f      	ldr	r3, [pc, #508]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012e0:	4b7e      	ldr	r3, [pc, #504]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	438a      	bics	r2, r1
 80012e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012e8:	4b7c      	ldr	r3, [pc, #496]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ec:	4b7b      	ldr	r3, [pc, #492]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80012ee:	2104      	movs	r1, #4
 80012f0:	438a      	bics	r2, r1
 80012f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d014      	beq.n	8001326 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb2c 	bl	8000958 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001304:	e009      	b.n	800131a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fb27 	bl	8000958 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	4a74      	ldr	r2, [pc, #464]	@ (80014e4 <HAL_RCC_OscConfig+0x60c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e0db      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131a:	4b70      	ldr	r3, [pc, #448]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800131c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x42e>
 8001324:	e013      	b.n	800134e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff fb17 	bl	8000958 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800132e:	e009      	b.n	8001344 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7ff fb12 	bl	8000958 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a6a      	ldr	r2, [pc, #424]	@ (80014e4 <HAL_RCC_OscConfig+0x60c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0c6      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001344:	4b65      	ldr	r3, [pc, #404]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	2202      	movs	r2, #2
 800134a:	4013      	ands	r3, r2
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800134e:	231f      	movs	r3, #31
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001358:	4b60      	ldr	r3, [pc, #384]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800135a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800135c:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800135e:	4962      	ldr	r1, [pc, #392]	@ (80014e8 <HAL_RCC_OscConfig+0x610>)
 8001360:	400a      	ands	r2, r1
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x496>
 800136c:	e0b0      	b.n	80014d0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800136e:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2238      	movs	r2, #56	@ 0x38
 8001374:	4013      	ands	r3, r2
 8001376:	2b10      	cmp	r3, #16
 8001378:	d100      	bne.n	800137c <HAL_RCC_OscConfig+0x4a4>
 800137a:	e078      	b.n	800146e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d153      	bne.n	800142c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001384:	4b55      	ldr	r3, [pc, #340]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800138a:	4958      	ldr	r1, [pc, #352]	@ (80014ec <HAL_RCC_OscConfig+0x614>)
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fae2 	bl	8000958 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fadd 	bl	8000958 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e092      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ac:	4b4b      	ldr	r3, [pc, #300]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	@ 0x80
 80013b2:	049b      	lsls	r3, r3, #18
 80013b4:	4013      	ands	r3, r2
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b8:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	@ (80014f0 <HAL_RCC_OscConfig+0x618>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	431a      	orrs	r2, r3
 80013e0:	4b3e      	ldr	r3, [pc, #248]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e6:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b3c      	ldr	r3, [pc, #240]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013ec:	2180      	movs	r1, #128	@ 0x80
 80013ee:	0449      	lsls	r1, r1, #17
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 80013fa:	2180      	movs	r1, #128	@ 0x80
 80013fc:	0549      	lsls	r1, r1, #21
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff faa9 	bl	8000958 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff faa4 	bl	8000958 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e059      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141e:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	4013      	ands	r3, r2
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x534>
 800142a:	e051      	b.n	80014d0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001432:	492e      	ldr	r1, [pc, #184]	@ (80014ec <HAL_RCC_OscConfig+0x614>)
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fa8e 	bl	8000958 <HAL_GetTick>
 800143c:	0003      	movs	r3, r0
 800143e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fa89 	bl	8000958 <HAL_GetTick>
 8001446:	0002      	movs	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e03e      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	049b      	lsls	r3, r3, #18
 800145c:	4013      	ands	r3, r2
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 8001466:	4923      	ldr	r1, [pc, #140]	@ (80014f4 <HAL_RCC_OscConfig+0x61c>)
 8001468:	400a      	ands	r2, r1
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	e030      	b.n	80014d0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e02b      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_RCC_OscConfig+0x604>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2203      	movs	r2, #3
 8001484:	401a      	ands	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	429a      	cmp	r2, r3
 800148c:	d11e      	bne.n	80014cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2270      	movs	r2, #112	@ 0x70
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001498:	429a      	cmp	r2, r3
 800149a:	d117      	bne.n	80014cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	23fe      	movs	r3, #254	@ 0xfe
 80014a0:	01db      	lsls	r3, r3, #7
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d10e      	bne.n	80014cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	23f8      	movs	r3, #248	@ 0xf8
 80014b2:	039b      	lsls	r3, r3, #14
 80014b4:	401a      	ands	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	0f5b      	lsrs	r3, r3, #29
 80014c2:	075a      	lsls	r2, r3, #29
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b008      	add	sp, #32
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40007000 	.word	0x40007000
 80014e4:	00001388 	.word	0x00001388
 80014e8:	efffffff 	.word	0xefffffff
 80014ec:	feffffff 	.word	0xfeffffff
 80014f0:	1fc1808c 	.word	0x1fc1808c
 80014f4:	effefffc 	.word	0xeffefffc

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0e9      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b76      	ldr	r3, [pc, #472]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2207      	movs	r2, #7
 8001512:	4013      	ands	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d91e      	bls.n	8001558 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b73      	ldr	r3, [pc, #460]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2207      	movs	r2, #7
 8001520:	4393      	bics	r3, r2
 8001522:	0019      	movs	r1, r3
 8001524:	4b70      	ldr	r3, [pc, #448]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800152c:	f7ff fa14 	bl	8000958 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001534:	e009      	b.n	800154a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001536:	f7ff fa0f 	bl	8000958 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	4a6a      	ldr	r2, [pc, #424]	@ (80016ec <HAL_RCC_ClockConfig+0x1f4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0ca      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800154a:	4b67      	ldr	r3, [pc, #412]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2207      	movs	r2, #7
 8001550:	4013      	ands	r3, r2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d015      	beq.n	800158e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	4013      	ands	r3, r2
 800156a:	d006      	beq.n	800157a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800156c:	4b60      	ldr	r3, [pc, #384]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	4b5f      	ldr	r3, [pc, #380]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001572:	21e0      	movs	r1, #224	@ 0xe0
 8001574:	01c9      	lsls	r1, r1, #7
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157a:	4b5d      	ldr	r3, [pc, #372]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	4a5d      	ldr	r2, [pc, #372]	@ (80016f4 <HAL_RCC_ClockConfig+0x1fc>)
 8001580:	4013      	ands	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b59      	ldr	r3, [pc, #356]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	d057      	beq.n	8001648 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	d12b      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e097      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b8:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	049b      	lsls	r3, r3, #18
 80015c0:	4013      	ands	r3, r2
 80015c2:	d11f      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e08b      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	d113      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e07f      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e8:	4b41      	ldr	r3, [pc, #260]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d108      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e074      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	4b3e      	ldr	r3, [pc, #248]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e06d      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001604:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2207      	movs	r2, #7
 800160a:	4393      	bics	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001618:	f7ff f99e 	bl	8000958 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001620:	e009      	b.n	8001636 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7ff f999 	bl	8000958 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a2f      	ldr	r2, [pc, #188]	@ (80016ec <HAL_RCC_ClockConfig+0x1f4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e054      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2238      	movs	r2, #56	@ 0x38
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	429a      	cmp	r2, r3
 8001646:	d1ec      	bne.n	8001622 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2207      	movs	r2, #7
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d21e      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2207      	movs	r2, #7
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001668:	f7ff f976 	bl	8000958 <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001670:	e009      	b.n	8001686 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001672:	f7ff f971 	bl	8000958 <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <HAL_RCC_ClockConfig+0x1f4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e02c      	b.n	80016e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2207      	movs	r2, #7
 800168c:	4013      	ands	r3, r2
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2204      	movs	r2, #4
 800169a:	4013      	ands	r3, r2
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <HAL_RCC_ClockConfig+0x200>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016b2:	f000 f829 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016b6:	0001      	movs	r1, r0
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	220f      	movs	r2, #15
 80016c0:	401a      	ands	r2, r3
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <HAL_RCC_ClockConfig+0x204>)
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	58d3      	ldr	r3, [r2, r3]
 80016c8:	221f      	movs	r2, #31
 80016ca:	4013      	ands	r3, r2
 80016cc:	000a      	movs	r2, r1
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_RCC_ClockConfig+0x208>)
 80016d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_RCC_ClockConfig+0x20c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff f8e1 	bl	80008a0 <HAL_InitTick>
 80016de:	0003      	movs	r3, r0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40022000 	.word	0x40022000
 80016ec:	00001388 	.word	0x00001388
 80016f0:	40021000 	.word	0x40021000
 80016f4:	fffff0ff 	.word	0xfffff0ff
 80016f8:	ffff8fff 	.word	0xffff8fff
 80016fc:	08002a14 	.word	0x08002a14
 8001700:	20000004 	.word	0x20000004
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800170e:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2238      	movs	r2, #56	@ 0x38
 8001714:	4013      	ands	r3, r2
 8001716:	d10f      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001718:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0adb      	lsrs	r3, r3, #11
 800171e:	2207      	movs	r2, #7
 8001720:	4013      	ands	r3, r2
 8001722:	2201      	movs	r2, #1
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	4835      	ldr	r0, [pc, #212]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xfc>)
 800172e:	f7fe fce7 	bl	8000100 <__udivsi3>
 8001732:	0003      	movs	r3, r0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	e05d      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2238      	movs	r2, #56	@ 0x38
 800173e:	4013      	ands	r3, r2
 8001740:	2b08      	cmp	r3, #8
 8001742:	d102      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x100>)
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e054      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2238      	movs	r2, #56	@ 0x38
 8001750:	4013      	ands	r3, r2
 8001752:	2b10      	cmp	r3, #16
 8001754:	d138      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001756:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	2207      	movs	r2, #7
 8001768:	4013      	ands	r3, r2
 800176a:	3301      	adds	r3, #1
 800176c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	4824      	ldr	r0, [pc, #144]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x100>)
 8001778:	f7fe fcc2 	bl	8000100 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	0019      	movs	r1, r3
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	227f      	movs	r2, #127	@ 0x7f
 8001788:	4013      	ands	r3, r2
 800178a:	434b      	muls	r3, r1
 800178c:	617b      	str	r3, [r7, #20]
        break;
 800178e:	e00d      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	481c      	ldr	r0, [pc, #112]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001794:	f7fe fcb4 	bl	8000100 <__udivsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	0019      	movs	r1, r3
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	227f      	movs	r2, #127	@ 0x7f
 80017a4:	4013      	ands	r3, r2
 80017a6:	434b      	muls	r3, r1
 80017a8:	617b      	str	r3, [r7, #20]
        break;
 80017aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0f5b      	lsrs	r3, r3, #29
 80017b2:	2207      	movs	r2, #7
 80017b4:	4013      	ands	r3, r2
 80017b6:	3301      	adds	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	6978      	ldr	r0, [r7, #20]
 80017be:	f7fe fc9f 	bl	8000100 <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e015      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2238      	movs	r2, #56	@ 0x38
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d103      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2238      	movs	r2, #56	@ 0x38
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b18      	cmp	r3, #24
 80017e6:	d103      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017e8:	23fa      	movs	r3, #250	@ 0xfa
 80017ea:	01db      	lsls	r3, r3, #7
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e001      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017f4:	693b      	ldr	r3, [r7, #16]
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b006      	add	sp, #24
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	00f42400 	.word	0x00f42400
 8001808:	007a1200 	.word	0x007a1200

0800180c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e04a      	b.n	80018b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	223d      	movs	r2, #61	@ 0x3d
 8001822:	5c9b      	ldrb	r3, [r3, r2]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	223c      	movs	r2, #60	@ 0x3c
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0018      	movs	r0, r3
 8001836:	f7fe ff6d 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	223d      	movs	r2, #61	@ 0x3d
 800183e:	2102      	movs	r1, #2
 8001840:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3304      	adds	r3, #4
 800184a:	0019      	movs	r1, r3
 800184c:	0010      	movs	r0, r2
 800184e:	f000 fb9d 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2248      	movs	r2, #72	@ 0x48
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	223e      	movs	r2, #62	@ 0x3e
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	223f      	movs	r2, #63	@ 0x3f
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2240      	movs	r2, #64	@ 0x40
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2241      	movs	r2, #65	@ 0x41
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2242      	movs	r2, #66	@ 0x42
 800187e:	2101      	movs	r1, #1
 8001880:	5499      	strb	r1, [r3, r2]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2243      	movs	r2, #67	@ 0x43
 8001886:	2101      	movs	r1, #1
 8001888:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2244      	movs	r2, #68	@ 0x44
 800188e:	2101      	movs	r1, #1
 8001890:	5499      	strb	r1, [r3, r2]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2245      	movs	r2, #69	@ 0x45
 8001896:	2101      	movs	r1, #1
 8001898:	5499      	strb	r1, [r3, r2]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2246      	movs	r2, #70	@ 0x46
 800189e:	2101      	movs	r1, #1
 80018a0:	5499      	strb	r1, [r3, r2]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2247      	movs	r2, #71	@ 0x47
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	223d      	movs	r2, #61	@ 0x3d
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	223d      	movs	r2, #61	@ 0x3d
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d001      	beq.n	80018d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e034      	b.n	800193e <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	223d      	movs	r2, #61	@ 0x3d
 80018d8:	2102      	movs	r1, #2
 80018da:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	@ (8001948 <HAL_TIM_Base_Start+0x8c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_TIM_Base_Start+0x3e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a18      	ldr	r2, [pc, #96]	@ (800194c <HAL_TIM_Base_Start+0x90>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d004      	beq.n	80018fa <HAL_TIM_Base_Start+0x3e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <HAL_TIM_Base_Start+0x94>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d116      	bne.n	8001928 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <HAL_TIM_Base_Start+0x98>)
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b06      	cmp	r3, #6
 800190a:	d016      	beq.n	800193a <HAL_TIM_Base_Start+0x7e>
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	429a      	cmp	r2, r3
 8001914:	d011      	beq.n	800193a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001926:	e008      	b.n	800193a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e000      	b.n	800193c <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b004      	add	sp, #16
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40000400 	.word	0x40000400
 8001950:	40014000 	.word	0x40014000
 8001954:	00010007 	.word	0x00010007

08001958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e04a      	b.n	8001a00 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	223d      	movs	r2, #61	@ 0x3d
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d107      	bne.n	8001986 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	223c      	movs	r2, #60	@ 0x3c
 800197a:	2100      	movs	r1, #0
 800197c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0018      	movs	r0, r3
 8001982:	f000 f841 	bl	8001a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	223d      	movs	r2, #61	@ 0x3d
 800198a:	2102      	movs	r1, #2
 800198c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	0019      	movs	r1, r3
 8001998:	0010      	movs	r0, r2
 800199a:	f000 faf7 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2248      	movs	r2, #72	@ 0x48
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	223e      	movs	r2, #62	@ 0x3e
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	223f      	movs	r2, #63	@ 0x3f
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2240      	movs	r2, #64	@ 0x40
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2241      	movs	r2, #65	@ 0x41
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2242      	movs	r2, #66	@ 0x42
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2243      	movs	r2, #67	@ 0x43
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2244      	movs	r2, #68	@ 0x44
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2245      	movs	r2, #69	@ 0x45
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2246      	movs	r2, #70	@ 0x46
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2247      	movs	r2, #71	@ 0x47
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	223d      	movs	r2, #61	@ 0x3d
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a10:	46c0      	nop			@ (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d108      	bne.n	8001a3a <HAL_TIM_PWM_Start+0x22>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	223e      	movs	r2, #62	@ 0x3e
 8001a2c:	5c9b      	ldrb	r3, [r3, r2]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	4193      	sbcs	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	e037      	b.n	8001aaa <HAL_TIM_PWM_Start+0x92>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d108      	bne.n	8001a52 <HAL_TIM_PWM_Start+0x3a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	223f      	movs	r2, #63	@ 0x3f
 8001a44:	5c9b      	ldrb	r3, [r3, r2]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	1e5a      	subs	r2, r3, #1
 8001a4c:	4193      	sbcs	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	e02b      	b.n	8001aaa <HAL_TIM_PWM_Start+0x92>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d108      	bne.n	8001a6a <HAL_TIM_PWM_Start+0x52>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2240      	movs	r2, #64	@ 0x40
 8001a5c:	5c9b      	ldrb	r3, [r3, r2]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	1e5a      	subs	r2, r3, #1
 8001a64:	4193      	sbcs	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	e01f      	b.n	8001aaa <HAL_TIM_PWM_Start+0x92>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d108      	bne.n	8001a82 <HAL_TIM_PWM_Start+0x6a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2241      	movs	r2, #65	@ 0x41
 8001a74:	5c9b      	ldrb	r3, [r3, r2]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	4193      	sbcs	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	e013      	b.n	8001aaa <HAL_TIM_PWM_Start+0x92>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d108      	bne.n	8001a9a <HAL_TIM_PWM_Start+0x82>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2242      	movs	r2, #66	@ 0x42
 8001a8c:	5c9b      	ldrb	r3, [r3, r2]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	4193      	sbcs	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	e007      	b.n	8001aaa <HAL_TIM_PWM_Start+0x92>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2243      	movs	r2, #67	@ 0x43
 8001a9e:	5c9b      	ldrb	r3, [r3, r2]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	4193      	sbcs	r3, r2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e085      	b.n	8001bbe <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d104      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0xaa>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	223e      	movs	r2, #62	@ 0x3e
 8001abc:	2102      	movs	r1, #2
 8001abe:	5499      	strb	r1, [r3, r2]
 8001ac0:	e023      	b.n	8001b0a <HAL_TIM_PWM_Start+0xf2>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d104      	bne.n	8001ad2 <HAL_TIM_PWM_Start+0xba>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	223f      	movs	r2, #63	@ 0x3f
 8001acc:	2102      	movs	r1, #2
 8001ace:	5499      	strb	r1, [r3, r2]
 8001ad0:	e01b      	b.n	8001b0a <HAL_TIM_PWM_Start+0xf2>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d104      	bne.n	8001ae2 <HAL_TIM_PWM_Start+0xca>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2240      	movs	r2, #64	@ 0x40
 8001adc:	2102      	movs	r1, #2
 8001ade:	5499      	strb	r1, [r3, r2]
 8001ae0:	e013      	b.n	8001b0a <HAL_TIM_PWM_Start+0xf2>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d104      	bne.n	8001af2 <HAL_TIM_PWM_Start+0xda>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2241      	movs	r2, #65	@ 0x41
 8001aec:	2102      	movs	r1, #2
 8001aee:	5499      	strb	r1, [r3, r2]
 8001af0:	e00b      	b.n	8001b0a <HAL_TIM_PWM_Start+0xf2>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d104      	bne.n	8001b02 <HAL_TIM_PWM_Start+0xea>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2242      	movs	r2, #66	@ 0x42
 8001afc:	2102      	movs	r1, #2
 8001afe:	5499      	strb	r1, [r3, r2]
 8001b00:	e003      	b.n	8001b0a <HAL_TIM_PWM_Start+0xf2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2243      	movs	r2, #67	@ 0x43
 8001b06:	2102      	movs	r1, #2
 8001b08:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 fe1e 	bl	8002754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc8 <HAL_TIM_PWM_Start+0x1b0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_TIM_PWM_Start+0x128>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a29      	ldr	r2, [pc, #164]	@ (8001bcc <HAL_TIM_PWM_Start+0x1b4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_TIM_PWM_Start+0x128>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <HAL_TIM_PWM_Start+0x1b8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_TIM_PWM_Start+0x128>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a26      	ldr	r2, [pc, #152]	@ (8001bd4 <HAL_TIM_PWM_Start+0x1bc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_TIM_PWM_Start+0x12c>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_TIM_PWM_Start+0x12e>
 8001b44:	2300      	movs	r3, #0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	0209      	lsls	r1, r1, #8
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <HAL_TIM_PWM_Start+0x1b0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_TIM_PWM_Start+0x162>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd8 <HAL_TIM_PWM_Start+0x1c0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_TIM_PWM_Start+0x162>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <HAL_TIM_PWM_Start+0x1b4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d116      	bne.n	8001ba8 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <HAL_TIM_PWM_Start+0x1c4>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	d016      	beq.n	8001bba <HAL_TIM_PWM_Start+0x1a2>
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	025b      	lsls	r3, r3, #9
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d011      	beq.n	8001bba <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba6:	e008      	b.n	8001bba <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e000      	b.n	8001bbc <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bba:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	40014000 	.word	0x40014000
 8001bd0:	40014400 	.word	0x40014400
 8001bd4:	40014800 	.word	0x40014800
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	00010007 	.word	0x00010007

08001be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2317      	movs	r3, #23
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	223c      	movs	r2, #60	@ 0x3c
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0e5      	b.n	8001dce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	223c      	movs	r2, #60	@ 0x3c
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b14      	cmp	r3, #20
 8001c0e:	d900      	bls.n	8001c12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001c10:	e0d1      	b.n	8001db6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	4b70      	ldr	r3, [pc, #448]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	0011      	movs	r1, r2
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fa34 	bl	8002094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2108      	movs	r1, #8
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2104      	movs	r1, #4
 8001c48:	438a      	bics	r2, r1
 8001c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6999      	ldr	r1, [r3, #24]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	619a      	str	r2, [r3, #24]
      break;
 8001c5e:	e0af      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	0011      	movs	r1, r2
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 fa9d 	bl	80021a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	0109      	lsls	r1, r1, #4
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4954      	ldr	r1, [pc, #336]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6999      	ldr	r1, [r3, #24]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	021a      	lsls	r2, r3, #8
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	619a      	str	r2, [r3, #24]
      break;
 8001ca4:	e08c      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 fafe 	bl	80022b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2104      	movs	r1, #4
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69d9      	ldr	r1, [r3, #28]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	61da      	str	r2, [r3, #28]
      break;
 8001ce6:	e06b      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	0011      	movs	r1, r2
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 fb65 	bl	80023c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	0109      	lsls	r1, r1, #4
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4932      	ldr	r1, [pc, #200]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69d9      	ldr	r1, [r3, #28]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	021a      	lsls	r2, r3, #8
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	61da      	str	r2, [r3, #28]
      break;
 8001d2c:	e048      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	0011      	movs	r1, r2
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fbac 	bl	8002494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2108      	movs	r1, #8
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2104      	movs	r1, #4
 8001d58:	438a      	bics	r2, r1
 8001d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001d6e:	e027      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 fbeb 	bl	8002554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2180      	movs	r1, #128	@ 0x80
 8001d8a:	0109      	lsls	r1, r1, #4
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4910      	ldr	r1, [pc, #64]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	021a      	lsls	r2, r3, #8
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001db4:	e004      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001db6:	2317      	movs	r3, #23
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
      break;
 8001dbe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	223c      	movs	r2, #60	@ 0x3c
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]

  return status;
 8001dc8:	2317      	movs	r3, #23
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b006      	add	sp, #24
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	08002a54 	.word	0x08002a54
 8001ddc:	fffffbff 	.word	0xfffffbff

08001de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	230f      	movs	r3, #15
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	223c      	movs	r2, #60	@ 0x3c
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_TIM_ConfigClockSource+0x20>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0bc      	b.n	8001f7a <HAL_TIM_ConfigClockSource+0x19a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	223c      	movs	r2, #60	@ 0x3c
 8001e04:	2101      	movs	r1, #1
 8001e06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	223d      	movs	r2, #61	@ 0x3d
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4a59      	ldr	r2, [pc, #356]	@ (8001f88 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2280      	movs	r2, #128	@ 0x80
 8001e36:	0192      	lsls	r2, r2, #6
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d040      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0xde>
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	0192      	lsls	r2, r2, #6
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d900      	bls.n	8001e46 <HAL_TIM_ConfigClockSource+0x66>
 8001e44:	e088      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	0152      	lsls	r2, r2, #5
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d100      	bne.n	8001e50 <HAL_TIM_ConfigClockSource+0x70>
 8001e4e:	e088      	b.n	8001f62 <HAL_TIM_ConfigClockSource+0x182>
 8001e50:	2280      	movs	r2, #128	@ 0x80
 8001e52:	0152      	lsls	r2, r2, #5
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d900      	bls.n	8001e5a <HAL_TIM_ConfigClockSource+0x7a>
 8001e58:	e07e      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e5a:	2b70      	cmp	r3, #112	@ 0x70
 8001e5c:	d018      	beq.n	8001e90 <HAL_TIM_ConfigClockSource+0xb0>
 8001e5e:	d900      	bls.n	8001e62 <HAL_TIM_ConfigClockSource+0x82>
 8001e60:	e07a      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e62:	2b60      	cmp	r3, #96	@ 0x60
 8001e64:	d04f      	beq.n	8001f06 <HAL_TIM_ConfigClockSource+0x126>
 8001e66:	d900      	bls.n	8001e6a <HAL_TIM_ConfigClockSource+0x8a>
 8001e68:	e076      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e6a:	2b50      	cmp	r3, #80	@ 0x50
 8001e6c:	d03b      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0x106>
 8001e6e:	d900      	bls.n	8001e72 <HAL_TIM_ConfigClockSource+0x92>
 8001e70:	e072      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	d057      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x146>
 8001e76:	d900      	bls.n	8001e7a <HAL_TIM_ConfigClockSource+0x9a>
 8001e78:	e06e      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e7a:	2b30      	cmp	r3, #48	@ 0x30
 8001e7c:	d063      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x166>
 8001e7e:	d86b      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d060      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x166>
 8001e84:	d868      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d05d      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x166>
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d05b      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x166>
 8001e8e:	e063      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ea0:	f000 fc38 	bl	8002714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2277      	movs	r2, #119	@ 0x77
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
      break;
 8001ebc:	e052      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ece:	f000 fc21 	bl	8002714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	01c9      	lsls	r1, r1, #7
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
      break;
 8001ee4:	e03e      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	f000 fb92 	bl	800261c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2150      	movs	r1, #80	@ 0x50
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 fbec 	bl	80026dc <TIM_ITRx_SetConfig>
      break;
 8001f04:	e02e      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f12:	001a      	movs	r2, r3
 8001f14:	f000 fbb0 	bl	8002678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2160      	movs	r1, #96	@ 0x60
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 fbdc 	bl	80026dc <TIM_ITRx_SetConfig>
      break;
 8001f24:	e01e      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f32:	001a      	movs	r2, r3
 8001f34:	f000 fb72 	bl	800261c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2140      	movs	r1, #64	@ 0x40
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fbcc 	bl	80026dc <TIM_ITRx_SetConfig>
      break;
 8001f44:	e00e      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0019      	movs	r1, r3
 8001f50:	0010      	movs	r0, r2
 8001f52:	f000 fbc3 	bl	80026dc <TIM_ITRx_SetConfig>
      break;
 8001f56:	e005      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001f58:	230f      	movs	r3, #15
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
      break;
 8001f60:	e000      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001f62:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	223d      	movs	r2, #61	@ 0x3d
 8001f68:	2101      	movs	r1, #1
 8001f6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	223c      	movs	r2, #60	@ 0x3c
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]

  return status;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	ffceff88 	.word	0xffceff88
 8001f88:	ffff00ff 	.word	0xffff00ff

08001f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a36      	ldr	r2, [pc, #216]	@ (8002078 <TIM_Base_SetConfig+0xec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_Base_SetConfig+0x20>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a35      	ldr	r2, [pc, #212]	@ (800207c <TIM_Base_SetConfig+0xf0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d108      	bne.n	8001fbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2270      	movs	r2, #112	@ 0x70
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <TIM_Base_SetConfig+0xec>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800207c <TIM_Base_SetConfig+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002080 <TIM_Base_SetConfig+0xf4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002084 <TIM_Base_SetConfig+0xf8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <TIM_Base_SetConfig+0xfc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a28      	ldr	r2, [pc, #160]	@ (800208c <TIM_Base_SetConfig+0x100>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a27      	ldr	r2, [pc, #156]	@ (8002090 <TIM_Base_SetConfig+0x104>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	4393      	bics	r3, r2
 8002006:	001a      	movs	r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <TIM_Base_SetConfig+0xec>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00b      	beq.n	8002046 <TIM_Base_SetConfig+0xba>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a14      	ldr	r2, [pc, #80]	@ (8002084 <TIM_Base_SetConfig+0xf8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <TIM_Base_SetConfig+0xba>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a13      	ldr	r2, [pc, #76]	@ (8002088 <TIM_Base_SetConfig+0xfc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <TIM_Base_SetConfig+0xba>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a12      	ldr	r2, [pc, #72]	@ (800208c <TIM_Base_SetConfig+0x100>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d103      	bne.n	800204e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2201      	movs	r2, #1
 8002066:	4393      	bics	r3, r2
 8002068:	001a      	movs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]
  }
}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40002000 	.word	0x40002000
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800
 8002090:	fffffcff 	.word	0xfffffcff

08002094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	2201      	movs	r2, #1
 80020aa:	4393      	bics	r3, r2
 80020ac:	001a      	movs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a32      	ldr	r2, [pc, #200]	@ (800218c <TIM_OC1_SetConfig+0xf8>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4393      	bics	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2202      	movs	r2, #2
 80020dc:	4393      	bics	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a28      	ldr	r2, [pc, #160]	@ (8002190 <TIM_OC1_SetConfig+0xfc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00b      	beq.n	800210a <TIM_OC1_SetConfig+0x76>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <TIM_OC1_SetConfig+0x100>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <TIM_OC1_SetConfig+0x76>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a26      	ldr	r2, [pc, #152]	@ (8002198 <TIM_OC1_SetConfig+0x104>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_OC1_SetConfig+0x76>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a25      	ldr	r2, [pc, #148]	@ (800219c <TIM_OC1_SetConfig+0x108>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10c      	bne.n	8002124 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2208      	movs	r2, #8
 800210e:	4393      	bics	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2204      	movs	r2, #4
 8002120:	4393      	bics	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <TIM_OC1_SetConfig+0xfc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00b      	beq.n	8002144 <TIM_OC1_SetConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <TIM_OC1_SetConfig+0x100>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <TIM_OC1_SetConfig+0xb0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <TIM_OC1_SetConfig+0x104>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_OC1_SetConfig+0xb0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a17      	ldr	r2, [pc, #92]	@ (800219c <TIM_OC1_SetConfig+0x108>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d111      	bne.n	8002168 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4a16      	ldr	r2, [pc, #88]	@ (80021a0 <TIM_OC1_SetConfig+0x10c>)
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <TIM_OC1_SetConfig+0x110>)
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b006      	add	sp, #24
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	fffeff8f 	.word	0xfffeff8f
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40014000 	.word	0x40014000
 8002198:	40014400 	.word	0x40014400
 800219c:	40014800 	.word	0x40014800
 80021a0:	fffffeff 	.word	0xfffffeff
 80021a4:	fffffdff 	.word	0xfffffdff

080021a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	2210      	movs	r2, #16
 80021be:	4393      	bics	r3, r2
 80021c0:	001a      	movs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002290 <TIM_OC2_SetConfig+0xe8>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <TIM_OC2_SetConfig+0xec>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2220      	movs	r2, #32
 80021f2:	4393      	bics	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a24      	ldr	r2, [pc, #144]	@ (8002298 <TIM_OC2_SetConfig+0xf0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10d      	bne.n	8002226 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2280      	movs	r2, #128	@ 0x80
 800220e:	4393      	bics	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2240      	movs	r2, #64	@ 0x40
 8002222:	4393      	bics	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <TIM_OC2_SetConfig+0xf0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00b      	beq.n	8002246 <TIM_OC2_SetConfig+0x9e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1a      	ldr	r2, [pc, #104]	@ (800229c <TIM_OC2_SetConfig+0xf4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <TIM_OC2_SetConfig+0x9e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <TIM_OC2_SetConfig+0xf8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d003      	beq.n	8002246 <TIM_OC2_SetConfig+0x9e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a18      	ldr	r2, [pc, #96]	@ (80022a4 <TIM_OC2_SetConfig+0xfc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d113      	bne.n	800226e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <TIM_OC2_SetConfig+0x100>)
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4a16      	ldr	r2, [pc, #88]	@ (80022ac <TIM_OC2_SetConfig+0x104>)
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	621a      	str	r2, [r3, #32]
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b006      	add	sp, #24
 800228e:	bd80      	pop	{r7, pc}
 8002290:	feff8fff 	.word	0xfeff8fff
 8002294:	fffffcff 	.word	0xfffffcff
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40014000 	.word	0x40014000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800
 80022a8:	fffffbff 	.word	0xfffffbff
 80022ac:	fffff7ff 	.word	0xfffff7ff

080022b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a33      	ldr	r2, [pc, #204]	@ (8002394 <TIM_OC3_SetConfig+0xe4>)
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a2f      	ldr	r2, [pc, #188]	@ (8002398 <TIM_OC3_SetConfig+0xe8>)
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2203      	movs	r2, #3
 80022e4:	4393      	bics	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a29      	ldr	r2, [pc, #164]	@ (800239c <TIM_OC3_SetConfig+0xec>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a25      	ldr	r2, [pc, #148]	@ (80023a0 <TIM_OC3_SetConfig+0xf0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a24      	ldr	r2, [pc, #144]	@ (80023a4 <TIM_OC3_SetConfig+0xf4>)
 8002312:	4013      	ands	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4a20      	ldr	r2, [pc, #128]	@ (80023a8 <TIM_OC3_SetConfig+0xf8>)
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <TIM_OC3_SetConfig+0xf0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_OC3_SetConfig+0x9a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <TIM_OC3_SetConfig+0xfc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <TIM_OC3_SetConfig+0x9a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1c      	ldr	r2, [pc, #112]	@ (80023b0 <TIM_OC3_SetConfig+0x100>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_OC3_SetConfig+0x9a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <TIM_OC3_SetConfig+0x104>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d113      	bne.n	8002372 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <TIM_OC3_SetConfig+0x108>)
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <TIM_OC3_SetConfig+0x10c>)
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	621a      	str	r2, [r3, #32]
}
 800238c:	46c0      	nop			@ (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}
 8002394:	fffffeff 	.word	0xfffffeff
 8002398:	fffeff8f 	.word	0xfffeff8f
 800239c:	fffffdff 	.word	0xfffffdff
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	fffff7ff 	.word	0xfffff7ff
 80023a8:	fffffbff 	.word	0xfffffbff
 80023ac:	40014000 	.word	0x40014000
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800
 80023b8:	ffffefff 	.word	0xffffefff
 80023bc:	ffffdfff 	.word	0xffffdfff

080023c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <TIM_OC4_SetConfig+0xb0>)
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a22      	ldr	r2, [pc, #136]	@ (8002474 <TIM_OC4_SetConfig+0xb4>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a21      	ldr	r2, [pc, #132]	@ (8002478 <TIM_OC4_SetConfig+0xb8>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <TIM_OC4_SetConfig+0xbc>)
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	031b      	lsls	r3, r3, #12
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <TIM_OC4_SetConfig+0xc0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00b      	beq.n	8002438 <TIM_OC4_SetConfig+0x78>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <TIM_OC4_SetConfig+0xc4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <TIM_OC4_SetConfig+0x78>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a17      	ldr	r2, [pc, #92]	@ (8002488 <TIM_OC4_SetConfig+0xc8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_OC4_SetConfig+0x78>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a16      	ldr	r2, [pc, #88]	@ (800248c <TIM_OC4_SetConfig+0xcc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d109      	bne.n	800244c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <TIM_OC4_SetConfig+0xd0>)
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	621a      	str	r2, [r3, #32]
}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b006      	add	sp, #24
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	ffffefff 	.word	0xffffefff
 8002474:	feff8fff 	.word	0xfeff8fff
 8002478:	fffffcff 	.word	0xfffffcff
 800247c:	ffffdfff 	.word	0xffffdfff
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800
 8002490:	ffffbfff 	.word	0xffffbfff

08002494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a23      	ldr	r2, [pc, #140]	@ (8002538 <TIM_OC5_SetConfig+0xa4>)
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <TIM_OC5_SetConfig+0xa8>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <TIM_OC5_SetConfig+0xac>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <TIM_OC5_SetConfig+0xb0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00b      	beq.n	8002502 <TIM_OC5_SetConfig+0x6e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a16      	ldr	r2, [pc, #88]	@ (8002548 <TIM_OC5_SetConfig+0xb4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <TIM_OC5_SetConfig+0x6e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a15      	ldr	r2, [pc, #84]	@ (800254c <TIM_OC5_SetConfig+0xb8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d003      	beq.n	8002502 <TIM_OC5_SetConfig+0x6e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <TIM_OC5_SetConfig+0xbc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d109      	bne.n	8002516 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a0c      	ldr	r2, [pc, #48]	@ (8002538 <TIM_OC5_SetConfig+0xa4>)
 8002506:	4013      	ands	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	621a      	str	r2, [r3, #32]
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b006      	add	sp, #24
 8002536:	bd80      	pop	{r7, pc}
 8002538:	fffeffff 	.word	0xfffeffff
 800253c:	fffeff8f 	.word	0xfffeff8f
 8002540:	fffdffff 	.word	0xfffdffff
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40014000 	.word	0x40014000
 800254c:	40014400 	.word	0x40014400
 8002550:	40014800 	.word	0x40014800

08002554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a24      	ldr	r2, [pc, #144]	@ (80025fc <TIM_OC6_SetConfig+0xa8>)
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a20      	ldr	r2, [pc, #128]	@ (8002600 <TIM_OC6_SetConfig+0xac>)
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <TIM_OC6_SetConfig+0xb0>)
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	051b      	lsls	r3, r3, #20
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a18      	ldr	r2, [pc, #96]	@ (8002608 <TIM_OC6_SetConfig+0xb4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <TIM_OC6_SetConfig+0x70>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a17      	ldr	r2, [pc, #92]	@ (800260c <TIM_OC6_SetConfig+0xb8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <TIM_OC6_SetConfig+0x70>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a16      	ldr	r2, [pc, #88]	@ (8002610 <TIM_OC6_SetConfig+0xbc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_OC6_SetConfig+0x70>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <TIM_OC6_SetConfig+0xc0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4a14      	ldr	r2, [pc, #80]	@ (8002618 <TIM_OC6_SetConfig+0xc4>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	621a      	str	r2, [r3, #32]
}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b006      	add	sp, #24
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	ffefffff 	.word	0xffefffff
 8002600:	feff8fff 	.word	0xfeff8fff
 8002604:	ffdfffff 	.word	0xffdfffff
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40014000 	.word	0x40014000
 8002610:	40014400 	.word	0x40014400
 8002614:	40014800 	.word	0x40014800
 8002618:	fffbffff 	.word	0xfffbffff

0800261c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2201      	movs	r2, #1
 8002634:	4393      	bics	r3, r2
 8002636:	001a      	movs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	22f0      	movs	r2, #240	@ 0xf0
 8002646:	4393      	bics	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	220a      	movs	r2, #10
 8002658:	4393      	bics	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b006      	add	sp, #24
 8002676:	bd80      	pop	{r7, pc}

08002678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2210      	movs	r2, #16
 8002690:	4393      	bics	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <TIM_TI2_ConfigInputStage+0x60>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	031b      	lsls	r3, r3, #12
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	22a0      	movs	r2, #160	@ 0xa0
 80026b4:	4393      	bics	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b006      	add	sp, #24
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	ffff0fff 	.word	0xffff0fff

080026dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <TIM_ITRx_SetConfig+0x34>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	2207      	movs	r2, #7
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	609a      	str	r2, [r3, #8]
}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	ffcfff8f 	.word	0xffcfff8f

08002714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <TIM_ETR_SetConfig+0x3c>)
 800272c:	4013      	ands	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	021a      	lsls	r2, r3, #8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	431a      	orrs	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b006      	add	sp, #24
 800274e:	bd80      	pop	{r7, pc}
 8002750:	ffff00ff 	.word	0xffff00ff

08002754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	221f      	movs	r2, #31
 8002764:	4013      	ands	r3, r2
 8002766:	2201      	movs	r2, #1
 8002768:	409a      	lsls	r2, r3
 800276a:	0013      	movs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	43d2      	mvns	r2, r2
 8002776:	401a      	ands	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	211f      	movs	r1, #31
 8002784:	400b      	ands	r3, r1
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4099      	lsls	r1, r3
 800278a:	000b      	movs	r3, r1
 800278c:	431a      	orrs	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223c      	movs	r2, #60	@ 0x3c
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e04f      	b.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223c      	movs	r2, #60	@ 0x3c
 80027b8:	2101      	movs	r1, #1
 80027ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	223d      	movs	r2, #61	@ 0x3d
 80027c0:	2102      	movs	r1, #2
 80027c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d108      	bne.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2270      	movs	r2, #112	@ 0x70
 80027f4:	4393      	bics	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a13      	ldr	r2, [pc, #76]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a12      	ldr	r2, [pc, #72]	@ (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10c      	bne.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	4393      	bics	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223d      	movs	r2, #61	@ 0x3d
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	223c      	movs	r2, #60	@ 0x3c
 800284e:	2100      	movs	r1, #0
 8002850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b004      	add	sp, #16
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40012c00 	.word	0x40012c00
 8002860:	ff0fffff 	.word	0xff0fffff
 8002864:	40000400 	.word	0x40000400
 8002868:	40014000 	.word	0x40014000

0800286c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223c      	movs	r2, #60	@ 0x3c
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002884:	2302      	movs	r3, #2
 8002886:	e06f      	b.n	8002968 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223c      	movs	r2, #60	@ 0x3c
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	22ff      	movs	r2, #255	@ 0xff
 8002894:	4393      	bics	r3, r2
 8002896:	001a      	movs	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a33      	ldr	r2, [pc, #204]	@ (8002970 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80028a4:	401a      	ands	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a30      	ldr	r2, [pc, #192]	@ (8002974 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80028b2:	401a      	ands	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a2e      	ldr	r2, [pc, #184]	@ (8002978 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80028c0:	401a      	ands	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80028ce:	401a      	ands	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80028dc:	401a      	ands	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80028ea:	401a      	ands	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a24      	ldr	r2, [pc, #144]	@ (8002988 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80028f8:	401a      	ands	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002908:	401a      	ands	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d11c      	bne.n	8002956 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002920:	401a      	ands	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	051b      	lsls	r3, r3, #20
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002930:	401a      	ands	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a17      	ldr	r2, [pc, #92]	@ (800299c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800293e:	401a      	ands	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a15      	ldr	r2, [pc, #84]	@ (80029a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800294c:	401a      	ands	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	223c      	movs	r2, #60	@ 0x3c
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}
 8002970:	fffffcff 	.word	0xfffffcff
 8002974:	fffffbff 	.word	0xfffffbff
 8002978:	fffff7ff 	.word	0xfffff7ff
 800297c:	ffffefff 	.word	0xffffefff
 8002980:	ffffdfff 	.word	0xffffdfff
 8002984:	ffffbfff 	.word	0xffffbfff
 8002988:	fff0ffff 	.word	0xfff0ffff
 800298c:	efffffff 	.word	0xefffffff
 8002990:	40012c00 	.word	0x40012c00
 8002994:	ff0fffff 	.word	0xff0fffff
 8002998:	feffffff 	.word	0xfeffffff
 800299c:	fdffffff 	.word	0xfdffffff
 80029a0:	dfffffff 	.word	0xdfffffff

080029a4 <memset>:
 80029a4:	0003      	movs	r3, r0
 80029a6:	1882      	adds	r2, r0, r2
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	7019      	strb	r1, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2600      	movs	r6, #0
 80029b8:	4c0c      	ldr	r4, [pc, #48]	@ (80029ec <__libc_init_array+0x38>)
 80029ba:	4d0d      	ldr	r5, [pc, #52]	@ (80029f0 <__libc_init_array+0x3c>)
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	2600      	movs	r6, #0
 80029c6:	f000 f819 	bl	80029fc <_init>
 80029ca:	4c0a      	ldr	r4, [pc, #40]	@ (80029f4 <__libc_init_array+0x40>)
 80029cc:	4d0a      	ldr	r5, [pc, #40]	@ (80029f8 <__libc_init_array+0x44>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	00b3      	lsls	r3, r6, #2
 80029da:	58eb      	ldr	r3, [r5, r3]
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	00b3      	lsls	r3, r6, #2
 80029e4:	58eb      	ldr	r3, [r5, r3]
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002aa8 	.word	0x08002aa8
 80029f0:	08002aa8 	.word	0x08002aa8
 80029f4:	08002aac 	.word	0x08002aac
 80029f8:	08002aa8 	.word	0x08002aa8

080029fc <_init>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr

08002a08 <_fini>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr
